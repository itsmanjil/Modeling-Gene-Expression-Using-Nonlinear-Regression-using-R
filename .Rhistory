x = "X5 input", y = "Output Signal Y") +
theme_minimal()
# Load necessary libraries
library(MASS)  # For generalized inverse
library(stats) # For log-likelihood, AIC, BIC
# Load your datasets
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine the time and gene expression data
data <- cbind(time_data, gene_data)
# Rename columns for clarity
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y output
# --- Define Models ---
generateModelData <- function(model, data) {
ones <- rep(1, nrow(data))
if (model == 1) return(as.matrix(cbind(data$X4, data$X3^2, ones)))              # Model 1
if (model == 2) return(as.matrix(cbind(data$X4, data$X3^2, data$X5, ones)))     # Model 2
if (model == 3) return(as.matrix(cbind(data$X3^3, data$X4^4, ones)))            # Model 3
if (model == 4) return(as.matrix(cbind(data$X4, data$X1, data$X3^3, ones)))     # Model 4
if (model == 5) return(as.matrix(cbind(data$X4, data$X1, data$X1^2, data$X3^3, ones))) # Model 5
}
# --- Task 2.1: Estimate Parameters ---
estimateParameters <- function(X, y) {
beta <- ginv(t(X) %*% X) %*% t(X) %*% y
return(beta)
}
# --- Task 2.2: Compute RSS ---
computeRSS <- function(y, X, beta) {
y_hat <- X %*% beta
rss <- sum((y - y_hat)^2)
return(rss)
}
# --- Task 2.3: Compute Log-Likelihood ---
computeLogLikelihood <- function(n, rss) {
sigma2 <- rss / (n - 1)
log_likelihood <- - (n / 2) * log(2 * pi) - (n / 2) * log(sigma2) - (1 / (2 * sigma2)) * rss
return(log_likelihood)
}
# --- Task 2.4: Compute AIC and BIC ---
computeAIC_BIC <- function(k, n, log_likelihood) {
AIC <- 2 * k - 2 * log_likelihood
BIC <- k * log(n) - 2 * log_likelihood
return(c(AIC = AIC, BIC = BIC))
}
# --- Solve Tasks for All Models ---
results <- data.frame(Model = integer(), RSS = numeric(), LogLik = numeric(), AIC = numeric(), BIC = numeric())
for (model in 1:5) {
X <- generateModelData(model, data)  # Generate design matrix
y <- data$Y                         # Output column
beta <- estimateParameters(X, y)    # Task 2.1
rss <- computeRSS(y, X, beta)       # Task 2.2
log_likelihood <- computeLogLikelihood(nrow(data), rss) # Task 2.3
metrics <- computeAIC_BIC(k = ncol(X), n = nrow(data), log_likelihood = log_likelihood) # Task 2.4
# Store results
results <- rbind(results, data.frame(Model = model, RSS = rss, LogLik = log_likelihood,
AIC = metrics["AIC"], BIC = metrics["BIC"]))
}
# Display Results
print("Results for Tasks 2.1 to 2.4:")
print(results)
# Model 1: y ~ X4 + X3^2
model1 <- lm(Y ~ X4 + I(X3^2), data = data)
cat("Model 1 Parameters:\n")
print(coef(model1))
# Model 2: y ~ X4 + X3^2 + X5
model2 <- lm(Y ~ X4 + I(X3^2) + X5, data = data)
cat("\nModel 2 Parameters:\n")
print(coef(model2))
# Model 3: y ~ X3 + X4 + X5^3
model3 <- lm(Y ~ X3 + X4 + I(X5^3), data = data)
cat("\nModel 3 Parameters:\n")
print(coef(model3))
# Model 4: y ~ X4 + X3^2 + X5^3
model4 <- lm(Y ~ X4 + I(X3^2) + I(X5^3), data = data)
cat("\nModel 4 Parameters:\n")
print(coef(model4))
# Model 5: y ~ X4 + X1^2 + X3^2
model5 <- lm(Y ~ X4 + I(X1^2) + I(X3^2), data = data)
cat("\nModel 5 Parameters:\n")
print(coef(model5))
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine time and gene expression data
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Rename columns
# Define function to calculate Least Squares parameters
estimate_theta <- function(X, y) {
theta <- solve(t(X) %*% X) %*% t(X) %*% y  # Compute (X^T X)^-1 X^T y
return(theta)
}
# Model 1: y ~ X4 + X3^2
X1 <- as.matrix(cbind(1, data$X4, data$X3^2))  # Add bias term (Intercept)
y <- as.matrix(data$Y)
theta1 <- estimate_theta(X1, y)
cat("Model 1 Parameters:\n")
print(theta1)
# Model 2: y ~ X4 + X3^2 + X5
X2 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5))
theta2 <- estimate_theta(X2, y)
cat("\nModel 2 Parameters:\n")
print(theta2)
# Model 3: y ~ X3 + X4 + X5^3
X3 <- as.matrix(cbind(1, data$X3, data$X4, data$X5^3))
theta3 <- estimate_theta(X3, y)
cat("\nModel 3 Parameters:\n")
print(theta3)
# Model 4: y ~ X4 + X3^2 + X5^3
X4 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5^3))
theta4 <- estimate_theta(X4, y)
cat("\nModel 4 Parameters:\n")
print(theta4)
# Model 5: y ~ X4 + X1^2 + X3^2
X5 <- as.matrix(cbind(1, data$X4, data$X1^2, data$X3^2))
theta5 <- estimate_theta(X5, y)
cat("\nModel 5 Parameters:\n")
print(theta5)
# Load necessary libraries
library(MASS)
# Load your datasets
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine time and gene expression data
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y output
# Define a function to compute Residual Sum of Squares (RSS)
computeRSS <- function(y, X, beta) {
y_hat <- X %*% beta  # Predicted values
rss <- sum((y - y_hat)^2)  # Sum of squared residuals
return(rss)
}
# Define function to estimate theta using Least Squares
estimate_theta <- function(X, y) {
theta <- solve(t(X) %*% X) %*% t(X) %*% y
return(theta)
}
# --- Model 1: y ~ X4 + X3^2 ---
X1 <- as.matrix(cbind(1, data$X4, data$X3^2))  # Design matrix with intercept
y <- as.matrix(data$Y)  # Output variable
theta1 <- estimate_theta(X1, y)  # Estimate parameters
rss1 <- computeRSS(y, X1, theta1)  # Compute RSS
cat("Model 1 RSS:", rss1, "\n")
# --- Model 2: y ~ X4 + X3^2 + X5 ---
X2 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5))
theta2 <- estimate_theta(X2, y)
rss2 <- computeRSS(y, X2, theta2)
cat("Model 2 RSS:", rss2, "\n")
# --- Model 3: y ~ X3 + X4 + X5^3 ---
X3 <- as.matrix(cbind(1, data$X3, data$X4, data$X5^3))
theta3 <- estimate_theta(X3, y)
rss3 <- computeRSS(y, X3, theta3)
cat("Model 3 RSS:", rss3, "\n")
# --- Model 4: y ~ X4 + X3^2 + X5^3 ---
X4 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5^3))
theta4 <- estimate_theta(X4, y)
rss4 <- computeRSS(y, X4, theta4)
cat("Model 4 RSS:", rss4, "\n")
# --- Model 5: y ~ X4 + X1^2 + X3^2 ---
X5 <- as.matrix(cbind(1, data$X4, data$X1^2, data$X3^2))
theta5 <- estimate_theta(X5, y)
rss5 <- computeRSS(y, X5, theta5)
cat("Model 5 RSS:", rss5, "\n")
# Print summary
cat("\nSummary of Residual Sum of Squares (RSS):\n")
cat("Model 1 RSS:", rss1, "\n")
cat("Model 2 RSS:", rss2, "\n")
cat("Model 3 RSS:", rss3, "\n")
cat("Model 4 RSS:", rss4, "\n")
cat("Model 5 RSS:", rss5, "\n")
# Load necessary libraries
library(MASS)
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine time and gene expression data
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y output
# Function to compute RSS
computeRSS <- function(y, X, beta) {
y_hat <- X %*% beta
rss <- sum((y - y_hat)^2)
return(rss)
}
# Function to estimate theta
estimate_theta <- function(X, y) {
theta <- solve(t(X) %*% X) %*% t(X) %*% y
return(theta)
}
# Function to compute log-likelihood
computeLogLikelihood <- function(n, rss) {
sigma2 <- rss / (n - 1)  # Variance estimate
log_likelihood <- -(n / 2) * log(2 * pi) - (n / 2) * log(sigma2) - (rss / (2 * sigma2))
return(log_likelihood)
}
# Initialize variables
y <- as.matrix(data$Y)  # Output variable
n <- nrow(data)         # Number of samples
# --- Model 1: y ~ X4 + X3^2 ---
X1 <- as.matrix(cbind(1, data$X4, data$X3^2))  # Design matrix
theta1 <- estimate_theta(X1, y)               # Estimate parameters
rss1 <- computeRSS(y, X1, theta1)             # Compute RSS
logLik1 <- computeLogLikelihood(n, rss1)      # Compute log-likelihood
cat("Model 1 Log-Likelihood:", logLik1, "\n")
# --- Model 2: y ~ X4 + X3^2 + X5 ---
X2 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5))
theta2 <- estimate_theta(X2, y)
rss2 <- computeRSS(y, X2, theta2)
logLik2 <- computeLogLikelihood(n, rss2)
cat("Model 2 Log-Likelihood:", logLik2, "\n")
# --- Model 3: y ~ X3 + X4 + X5^3 ---
X3 <- as.matrix(cbind(1, data$X3, data$X4, data$X5^3))
theta3 <- estimate_theta(X3, y)
rss3 <- computeRSS(y, X3, theta3)
logLik3 <- computeLogLikelihood(n, rss3)
cat("Model 3 Log-Likelihood:", logLik3, "\n")
# --- Model 4: y ~ X4 + X3^2 + X5^3 ---
X4 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5^3))
theta4 <- estimate_theta(X4, y)
rss4 <- computeRSS(y, X4, theta4)
logLik4 <- computeLogLikelihood(n, rss4)
cat("Model 4 Log-Likelihood:", logLik4, "\n")
# --- Model 5: y ~ X4 + X1^2 + X3^2 ---
X5 <- as.matrix(cbind(1, data$X4, data$X1^2, data$X3^2))
theta5 <- estimate_theta(X5, y)
rss5 <- computeRSS(y, X5, theta5)
logLik5 <- computeLogLikelihood(n, rss5)
cat("Model 5 Log-Likelihood:", logLik5, "\n")
# Summary of log-likelihoods
cat("\nSummary of Log-Likelihoods:\n")
cat("Model 1 Log-Likelihood:", logLik1, "\n")
cat("Model 2 Log-Likelihood:", logLik2, "\n")
cat("Model 3 Log-Likelihood:", logLik3, "\n")
cat("Model 4 Log-Likelihood:", logLik4, "\n")
cat("Model 5 Log-Likelihood:", logLik5, "\n")
# Load necessary libraries
library(MASS)  # For solving (X^T X)^-1 X^T y
library(ggplot2)  # For Q-Q plots
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine the datasets
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y output
# Function to compute residuals
computeResiduals <- function(y, X, beta) {
y_hat <- X %*% beta  # Predicted values
residuals <- y - y_hat  # Residuals
return(residuals)
}
# Function to estimate theta
estimate_theta <- function(X, y) {
theta <- solve(t(X) %*% X) %*% t(X) %*% y
return(theta)
}
# Initialize variables
y <- as.matrix(data$Y)
# --- Model 1: y ~ X4 + X3^2 ---
X1 <- as.matrix(cbind(1, data$X4, data$X3^2))  # Design matrix
theta1 <- estimate_theta(X1, y)
residuals1 <- computeResiduals(y, X1, theta1)
# --- Model 2: y ~ X4 + X3^2 + X5 ---
X2 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5))
theta2 <- estimate_theta(X2, y)
residuals2 <- computeResiduals(y, X2, theta2)
# --- Model 3: y ~ X3 + X4 + X5^3 ---
X3 <- as.matrix(cbind(1, data$X3, data$X4, data$X5^3))
theta3 <- estimate_theta(X3, y)
residuals3 <- computeResiduals(y, X3, theta3)
# --- Model 4: y ~ X4 + X3^2 + X5^3 ---
X4 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5^3))
theta4 <- estimate_theta(X4, y)
residuals4 <- computeResiduals(y, X4, theta4)
# --- Model 5: y ~ X4 + X1^2 + X3^2 ---
X5 <- as.matrix(cbind(1, data$X4, data$X1^2, data$X3^2))
theta5 <- estimate_theta(X5, y)
residuals5 <- computeResiduals(y, X5, theta5)
# --- Plot Q-Q Plots for Residuals ---
# Function to create Q-Q plot
qq_plot <- function(residuals, title) {
ggplot(data.frame(residuals), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "blue") +
labs(title = title, x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal()
}
# Generate Q-Q plots for each model
plot1 <- qq_plot(residuals1, "Q-Q Plot for Model 1 Residuals")
plot2 <- qq_plot(residuals2, "Q-Q Plot for Model 2 Residuals")
plot3 <- qq_plot(residuals3, "Q-Q Plot for Model 3 Residuals")
plot4 <- qq_plot(residuals4, "Q-Q Plot for Model 4 Residuals")
plot5 <- qq_plot(residuals5, "Q-Q Plot for Model 5 Residuals")
# Save Q-Q plots
ggsave("E:\\Rpractice\\regression\\qq_plot_model1.png", plot1, width = 6, height = 4)
ggsave("E:\\Rpractice\\regression\\qq_plot_model2.png", plot2, width = 6, height = 4)
ggsave("E:\\Rpractice\\regression\\qq_plot_model3.png", plot3, width = 6, height = 4)
ggsave("E:\\Rpractice\\regression\\qq_plot_model4.png", plot4, width = 6, height = 4)
ggsave("E:\\Rpractice\\regression\\qq_plot_model5.png", plot5, width = 6, height = 4)
# Display all plots
print(plot1)
print(plot2)
print(plot3)
print(plot4)
print(plot5)
# Load necessary libraries
library(MASS)
library(ggplot2)
library(gridExtra)
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine datasets
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y
# Functions ---------------------------------------------------
# Function to compute RSS
computeRSS <- function(y, X, beta) {
y_hat <- X %*% beta
rss <- sum((y - y_hat)^2)
return(rss)
}
# Function to estimate theta
estimate_theta <- function(X, y) {
theta <- solve(t(X) %*% X) %*% t(X) %*% y
return(theta)
}
# Function to compute log-likelihood
computeLogLikelihood <- function(n, rss) {
sigma2 <- rss / (n - 1)  # Variance estimate
log_likelihood <- -(n / 2) * log(2 * pi) - (n / 2) * log(sigma2) - (rss / (2 * sigma2))
return(log_likelihood)
}
# Function to compute AIC and BIC
computeAIC_BIC <- function(log_likelihood, k, n) {
AIC <- 2 * k - 2 * log_likelihood
BIC <- k * log(n) - 2 * log_likelihood
return(list(AIC = AIC, BIC = BIC))
}
# Function to create Q-Q plot
qq_plot <- function(residuals, title) {
ggplot(data.frame(residuals), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "blue") +
labs(title = title, x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal()
}
# Initialize variables
y <- as.matrix(data$Y)
n <- nrow(data)
# Model Evaluation --------------------------------------------
results <- list()
# --- Model 1: y ~ X4 + X3^2 ---
X1 <- as.matrix(cbind(1, data$X4, data$X3^2))
theta1 <- estimate_theta(X1, y)
rss1 <- computeRSS(y, X1, theta1)
logLik1 <- computeLogLikelihood(n, rss1)
metrics1 <- computeAIC_BIC(logLik1, ncol(X1), n)
residuals1 <- y - X1 %*% theta1
results$Model1 <- list(AIC = metrics1$AIC, BIC = metrics1$BIC, residuals = residuals1)
# --- Model 2: y ~ X4 + X3^2 + X5 ---
X2 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5))
theta2 <- estimate_theta(X2, y)
rss2 <- computeRSS(y, X2, theta2)
logLik2 <- computeLogLikelihood(n, rss2)
metrics2 <- computeAIC_BIC(logLik2, ncol(X2), n)
residuals2 <- y - X2 %*% theta2
results$Model2 <- list(AIC = metrics2$AIC, BIC = metrics2$BIC, residuals = residuals2)
# --- Model 3: y ~ X3 + X4 + X5^3 ---
X3 <- as.matrix(cbind(1, data$X3, data$X4, data$X5^3))
theta3 <- estimate_theta(X3, y)
rss3 <- computeRSS(y, X3, theta3)
logLik3 <- computeLogLikelihood(n, rss3)
metrics3 <- computeAIC_BIC(logLik3, ncol(X3), n)
residuals3 <- y - X3 %*% theta3
results$Model3 <- list(AIC = metrics3$AIC, BIC = metrics3$BIC, residuals = residuals3)
# --- Model 4: y ~ X4 + X3^2 + X5^3 ---
X4 <- as.matrix(cbind(1, data$X4, data$X3^2, data$X5^3))
theta4 <- estimate_theta(X4, y)
rss4 <- computeRSS(y, X4, theta4)
logLik4 <- computeLogLikelihood(n, rss4)
metrics4 <- computeAIC_BIC(logLik4, ncol(X4), n)
residuals4 <- y - X4 %*% theta4
results$Model4 <- list(AIC = metrics4$AIC, BIC = metrics4$BIC, residuals = residuals4)
# --- Model 5: y ~ X4 + X1^2 + X3^2 ---
X5 <- as.matrix(cbind(1, data$X4, data$X1^2, data$X3^2))
theta5 <- estimate_theta(X5, y)
rss5 <- computeRSS(y, X5, theta5)
logLik5 <- computeLogLikelihood(n, rss5)
metrics5 <- computeAIC_BIC(logLik5, ncol(X5), n)
residuals5 <- y - X5 %*% theta5
results$Model5 <- list(AIC = metrics5$AIC, BIC = metrics5$BIC, residuals = residuals5)
# Compare Results ---------------------------------------------
cat("AIC and BIC Comparison:\n")
for (model in names(results)) {
cat(model, "AIC:", results[[model]]$AIC, "BIC:", results[[model]]$BIC, "\n")
}
# Generate Q-Q plots for all models
plot1 <- qq_plot(results$Model1$residuals, "Q-Q Plot for Model 1 Residuals")
plot2 <- qq_plot(results$Model2$residuals, "Q-Q Plot for Model 2 Residuals")
plot3 <- qq_plot(results$Model3$residuals, "Q-Q Plot for Model 3 Residuals")
plot4 <- qq_plot(results$Model4$residuals, "Q-Q Plot for Model 4 Residuals")
plot5 <- qq_plot(results$Model5$residuals, "Q-Q Plot for Model 5 Residuals")
# Display Q-Q plots
grid.arrange(plot1, plot2, plot3, plot4, plot5, ncol = 2)
View(qq_plot)
# Load necessary libraries
library(ggplot2)
library(MASS)
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine datasets
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y
# Split Data into Training (70%) and Testing (30%) ---------------------------
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(data), 0.7 * nrow(data))  # Random indices for training
train_data <- data[train_index, ]  # Training set
test_data <- data[-train_index, ]  # Testing set
# Select the Best Model: Model 4 (as an example)
# Model 4: y ~ X4 + X3^2 + X5^3
y_train <- as.matrix(train_data$Y)  # Training output
X_train <- as.matrix(cbind(1, train_data$X4, train_data$X3^2, train_data$X5^3))  # Design matrix
# Estimate Parameters using Training Data ------------------------------------
theta <- solve(t(X_train) %*% X_train) %*% t(X_train) %*% y_train
cat("Estimated Parameters (Model 4):", theta, "\n")
# Make Predictions on Testing Data ------------------------------------------
y_test <- as.matrix(test_data$Y)  # Actual output for testing
X_test <- as.matrix(cbind(1, test_data$X4, test_data$X3^2, test_data$X5^3))  # Design matrix for testing
y_pred <- X_test %*% theta  # Predicted output
# Compute Residual Standard Error -------------------------------------------
residuals <- y_train - X_train %*% theta
sigma2 <- sum(residuals^2) / (nrow(X_train) - ncol(X_train))  # Variance estimate
se_pred <- sqrt(sigma2 * diag(X_test %*% solve(t(X_train) %*% X_train) %*% t(X_test)))  # Standard errors
# Compute 95% Confidence Intervals -----------------------------------------
lower_bound <- y_pred - 1.96 * se_pred  # Lower bound
upper_bound <- y_pred + 1.96 * se_pred  # Upper bound
# Combine Predictions and Confidence Intervals
results <- data.frame(
Time = test_data$Time,
Actual = y_test,
Predicted = y_pred,
Lower = lower_bound,
Upper = upper_bound
)
# Plot the Predictions with 95% Confidence Intervals -----------------------
plot <- ggplot(results, aes(x = Time)) +
geom_point(aes(y = Actual), color = "red", size = 2, shape = 16) +  # Testing data
geom_line(aes(y = Predicted), color = "blue", size = 1) +          # Predicted values
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +  # Confidence interval
labs(
title = "Model Predictions with 95% Confidence Intervals",
x = "Time",
y = "Output (Y)"
) +
theme_minimal()
# Save and Display the Plot
ggsave("E:\\Rpractice\\regression\\model_predictions_confidence_intervals.png", plot, width = 10, height = 6)
print(plot)
# Load necessary libraries
library(ggplot2)
library(MASS)
# Load the dataset
gene_data <- read.csv("E:\\Rpractice\\regression\\data_03cf4b0d-8941-4323-998c-a7ff1a83d0f2_1733812247131.csv")
time_data <- read.csv("E:\\Rpractice\\regression\\time_1673241270748.csv")
# Combine datasets
data <- cbind(time_data, gene_data)
colnames(data) <- c("Time", "X1", "Y", "X3", "X4", "X5")  # Assuming X2 is Y
# Split Data into Training (70%) and Testing (30%) ---------------------------
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(data), 0.7 * nrow(data))  # Random indices for training
train_data <- data[train_index, ]  # Training set
test_data <- data[-train_index, ]  # Testing set
# Select the Best Model: Model 4 (as an example)
# Model 4: y ~ X4 + X3^2 + X5^3
y_train <- as.matrix(train_data$Y)  # Training output
X_train <- as.matrix(cbind(1, train_data$X4, train_data$X3^2, train_data$X5^3))  # Design matrix
# Estimate Parameters using Training Data ------------------------------------
theta <- solve(t(X_train) %*% X_train) %*% t(X_train) %*% y_train
cat("Estimated Parameters (Model 4):", theta, "\n")
# Make Predictions on Testing Data ------------------------------------------
y_test <- as.matrix(test_data$Y)  # Actual output for testing
X_test <- as.matrix(cbind(1, test_data$X4, test_data$X3^2, test_data$X5^3))  # Design matrix for testing
y_pred <- X_test %*% theta  # Predicted output
# Compute Residual Standard Error -------------------------------------------
residuals <- y_train - X_train %*% theta
sigma2 <- sum(residuals^2) / (nrow(X_train) - ncol(X_train))  # Variance estimate
se_pred <- sqrt(sigma2 * diag(X_test %*% solve(t(X_train) %*% X_train) %*% t(X_test)))  # Standard errors
# Compute 95% Confidence Intervals -----------------------------------------
lower_bound <- y_pred - 1.96 * se_pred  # Lower bound
upper_bound <- y_pred + 1.96 * se_pred  # Upper bound
# Combine Predictions and Confidence Intervals
results <- data.frame(
Time = test_data$Time,
Actual = y_test,
Predicted = y_pred,
Lower = lower_bound,
Upper = upper_bound
)
# Plot the Predictions with 95% Confidence Intervals -----------------------
plot <- ggplot(results, aes(x = Time)) +
geom_point(aes(y = Actual), color = "red", size = 2, shape = 16) +  # Testing data
geom_line(aes(y = Predicted), color = "blue", size = 1) +          # Predicted values
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +  # Confidence interval
labs(
title = "Model Predictions with 95% Confidence Intervals",
x = "Time",
y = "Output (Y)"
) +
theme_minimal()
# Save and Display the Plot
ggsave("E:\\Rpractice\\regression\\model_predictions_confidence_intervals.png", plot, width = 10, height = 6)
print(plot)
